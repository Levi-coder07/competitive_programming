#include <iostream>
#include <vector>
#include <queue>
using namespace std;
vector<vector<int>> grafo(200);
vector<int> color(200,2);
bool bfs(int start,bool bicolorable){
    queue<int> q;
    color[start] = 0;
    q.push(0);
    while(!q.empty() && bicolorable){
        int u = q.front();
        q.pop();
        for (int i = 0; i < grafo[u].size(); i++)
            {
                
            if (color[grafo[u][i]] == color[u])
                {
                    bicolorable = false;
                    break;
                }
            else if (color[grafo[u][i]] == 2)
                {
                color[grafo[u][i]] = 1 - color[u]; 
                q.push(grafo[u][i]);
                }
            }
        }
    return bicolorable;
}
int main(){
    int cases;
    
    bool visited =true;
    int n,m,relations;
    int p,q;
    while(cin>>n){
        if(n==0){break;}
        bool bicolorable = true;
        grafo.resize(n);
        cin>>relations;
        color.resize(relations,2);
        for(int i = 0;i<relations;i++){
            cin>>p>>q;
            grafo[p].push_back(q);
            grafo[q].push_back(p);
            
        }
        if(bfs(0,bicolorable)){
            cout<< "BICOLORABLE." <<endl;
        }else{
            cout<<"NOT BICOLORABLE."<<endl;
        }
        
        
    }
    return 0 ;
}
